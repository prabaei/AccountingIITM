//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Accounting.data.databasemodel2
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AccountingEntities : DbContext
    {
        public AccountingEntities()
            : base("name=AccountingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccTransaction> AccTransactions { get; set; }
        public virtual DbSet<ImprestMaster> ImprestMasters { get; set; }
        public virtual DbSet<VoucherSubType> VoucherSubTypes { get; set; }
        public virtual DbSet<VoucherType> VoucherTypes { get; set; }
    
        public virtual int commitTran(string transNo, string projectNo, int? voucherType, string voucherNo, Nullable<decimal> amount, Nullable<System.DateTime> bankDate, string chequeno, string narration, string remarks, ObjectParameter currentamount, ObjectParameter avilableamount, ObjectParameter errmsg, ObjectParameter transdone)
        {
            var transNoParameter = transNo != null ?
                new ObjectParameter("TransNo", transNo) :
                new ObjectParameter("TransNo", typeof(string));
    
            var projectNoParameter = projectNo != null ?
                new ObjectParameter("ProjectNo", projectNo) :
                new ObjectParameter("ProjectNo", typeof(string));
    
            var voucherTypeParameter = voucherType.HasValue ?
                new ObjectParameter("voucherType", voucherType) :
                new ObjectParameter("voucherType", typeof(int));
    
            var voucherNoParameter = voucherNo != null ?
                new ObjectParameter("voucherNo", voucherNo) :
                new ObjectParameter("voucherNo", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var bankDateParameter = bankDate.HasValue ?
                new ObjectParameter("bankDate", bankDate) :
                new ObjectParameter("bankDate", typeof(System.DateTime));
    
            var chequenoParameter = chequeno != null ?
                new ObjectParameter("chequeno", chequeno) :
                new ObjectParameter("chequeno", typeof(string));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("narration", narration) :
                new ObjectParameter("narration", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("remarks", remarks) :
                new ObjectParameter("remarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("commitTran", transNoParameter, projectNoParameter, voucherTypeParameter, voucherNoParameter, amountParameter, bankDateParameter, chequenoParameter, narrationParameter, remarksParameter, currentamount, avilableamount, errmsg, transdone);
        }
    
        public virtual int createTran(string instid, ObjectParameter transactionNo, ObjectParameter isFailed, ObjectParameter ermsg)
        {
            var instidParameter = instid != null ?
                new ObjectParameter("instid", instid) :
                new ObjectParameter("instid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("createTran", instidParameter, transactionNo, isFailed, ermsg);
        }
    }
}
